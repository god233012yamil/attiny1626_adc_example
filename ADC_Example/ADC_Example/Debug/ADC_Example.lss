
ADC_Example.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00803800  00803800  000008a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000830  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00803800  00803800  000008a4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000008a4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000008d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000208  00000000  00000000  00000918  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004609  00000000  00000000  00000b20  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002269  00000000  00000000  00005129  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001024  00000000  00000000  00007392  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002b8  00000000  00000000  000083b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002385  00000000  00000000  00008670  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000486  00000000  00000000  0000a9f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000138  00000000  00000000  0000ae7b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3c 00 	jmp	0x78	; 0x78 <__ctors_end>
   4:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
   8:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
   c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  10:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  14:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  18:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  1c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  20:	0c 94 47 01 	jmp	0x28e	; 0x28e <__vector_8>
  24:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  28:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  2c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  30:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  34:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  38:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  3c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  40:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  44:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  48:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  4c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  50:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  54:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  58:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  5c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  60:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  64:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  68:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  6c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  70:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  74:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>

00000078 <__ctors_end>:
  78:	11 24       	eor	r1, r1
  7a:	1f be       	out	0x3f, r1	; 63
  7c:	cf ef       	ldi	r28, 0xFF	; 255
  7e:	cd bf       	out	0x3d, r28	; 61
  80:	df e3       	ldi	r29, 0x3F	; 63
  82:	de bf       	out	0x3e, r29	; 62

00000084 <__do_clear_bss>:
  84:	28 e3       	ldi	r18, 0x38	; 56
  86:	a0 e0       	ldi	r26, 0x00	; 0
  88:	b8 e3       	ldi	r27, 0x38	; 56
  8a:	01 c0       	rjmp	.+2      	; 0x8e <.do_clear_bss_start>

0000008c <.do_clear_bss_loop>:
  8c:	1d 92       	st	X+, r1

0000008e <.do_clear_bss_start>:
  8e:	a8 30       	cpi	r26, 0x08	; 8
  90:	b2 07       	cpc	r27, r18
  92:	e1 f7       	brne	.-8      	; 0x8c <.do_clear_bss_loop>
  94:	0e 94 61 01 	call	0x2c2	; 0x2c2 <main>
  98:	0c 94 16 04 	jmp	0x82c	; 0x82c <_exit>

0000009c <__bad_interrupt>:
  9c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a0 <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
  a0:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <system_init>
  a4:	08 95       	ret

000000a6 <TCA0_Init>:
void TCA0_Init(uint16_t time_in_ms) {
	
	// PER = (Desire time in mS * Main Clock in Hz) / (Main Clock Prescaler * Timer/Counter Prescaler * 1000)
	// Timer/Counter Pre-scaler = 1
	// * 1000 is to count in mS.	
	TCA0.SINGLE.PER = (register16_t)((float)((time_in_ms * F_CPU) / (1 * 1000)));
  a6:	dc 01       	movw	r26, r24
  a8:	20 e4       	ldi	r18, 0x40	; 64
  aa:	3b e4       	ldi	r19, 0x4B	; 75
  ac:	4c e4       	ldi	r20, 0x4C	; 76
  ae:	50 e0       	ldi	r21, 0x00	; 0
  b0:	0e 94 da 03 	call	0x7b4	; 0x7b4 <__muluhisi3>
  b4:	28 ee       	ldi	r18, 0xE8	; 232
  b6:	33 e0       	ldi	r19, 0x03	; 3
  b8:	40 e0       	ldi	r20, 0x00	; 0
  ba:	50 e0       	ldi	r21, 0x00	; 0
  bc:	0e 94 bb 03 	call	0x776	; 0x776 <__divmodsi4>
  c0:	ca 01       	movw	r24, r20
  c2:	b9 01       	movw	r22, r18
  c4:	0e 94 c2 02 	call	0x584	; 0x584 <__floatsisf>
  c8:	0e 94 91 02 	call	0x522	; 0x522 <__fixunssfsi>
  cc:	e0 e0       	ldi	r30, 0x00	; 0
  ce:	fa e0       	ldi	r31, 0x0A	; 10
  d0:	66 a3       	std	Z+38, r22	; 0x26
  d2:	77 a3       	std	Z+39, r23	; 0x27
	
	// Bit 0 – OVF Timer Overflow/Underflow Interrupt Enable
	// Enable overflow interrupt
	TCA0.SINGLE.INTCTRL = 0 << TCA_SINGLE_CMP0_bp /* Compare 0 Interrupt: disabled */
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	82 87       	std	Z+10, r24	; 0x0a
		| 0 << TCA_SINGLE_CMP2_bp /* Compare 2 Interrupt: disabled */
		| 1 << TCA_SINGLE_OVF_bp; /* Overflow Interrupt: enabled */
		
	// Bits 2:0 – WGMODE[2:0] Waveform Generation Mode.
	// Bits 4, 5, 6 – CMPEN Compare n Enable.
	TCA0.SINGLE.CTRLB = 0 << TCA_SINGLE_ALUPD_bp /* Auto Lock Update: disabled */
  d8:	11 82       	std	Z+1, r1	; 0x01
	
	// Bit 0 – ENABLE Enable
	// Enable the peripheral by writing a '1' to the ENABLE bit in the Control A register (TCAn.CTRLA).
	// Bits 3:1 – CLKSEL[2:0] Clock Select
	// Select the clock frequency to fCLK_PER/1 by clearing bits 3:1
	TCA0.SINGLE.CTRLA = TCA_SINGLE_CLKSEL_DIV1_gc /* System Clock */
  da:	80 83       	st	Z, r24
  dc:	08 95       	ret

000000de <WDT_Init>:
*
* \return	Nothing.
*/
void WDT_Init(WDT_PERIOD_t wdt_period) {
	// Disable global interrupts.
	cli();
  de:	f8 94       	cli
	// Reset Watchdog Timer
	asm("wdr");
  e0:	a8 95       	wdr
 *       on calling convention. The memory model is not visible to the
 *       preprocessor, so it must be defined in the Assembler preprocessor directives.
 */
static inline void ccp_write_io(void *addr, uint8_t value)
{
	protected_write_io(addr, CCP_IOREG_gc, value);
  e2:	48 2f       	mov	r20, r24
  e4:	68 ed       	ldi	r22, 0xD8	; 216
  e6:	80 e0       	ldi	r24, 0x00	; 0
  e8:	91 e0       	ldi	r25, 0x01	; 1
  ea:	0e 94 0e 02 	call	0x41c	; 0x41c <protected_write_io>
	// Writing a non-zero value to this bit enables the WDT,
	// and selects the time-out period in Normal mode accordingly.
	//ccp_write_io((void*)&(WDT.CTRLA), WDT_PERIOD_OFF_gc | WDT_WINDOW_OFF_gc);
	ccp_write_io((void*)&(WDT.CTRLA), wdt_period | WDT_WINDOW_OFF_gc);
	// Enable global interrupts.
	sei();
  ee:	78 94       	sei
  f0:	08 95       	ret

000000f2 <WDT_Reset>:
*
* \return	Nothing.
*/
void WDT_Reset(void) {
	// Disable global interrupts.
	cli();
  f2:	f8 94       	cli
	// Reset Watchdog Timer
	asm("wdr");
  f4:	a8 95       	wdr
	// Enable global interrupts.
	sei();
  f6:	78 94       	sei
  f8:	08 95       	ret

000000fa <ADC0_Measure_Voltage>:
* \brief	This function is designed to measure voltage using the ADC
*           peripheral. 
*
* \return	Nothing.
*/
void ADC0_Measure_Voltage(void) {
  fa:	cf 93       	push	r28
	// Variable declaration and initialization in this scope (local variables).
	adc_result_t adc_result = 0;
	
	// Switch to the appropriate state.
	switch(adc0_state) {
  fc:	80 91 07 38 	lds	r24, 0x3807	; 0x803807 <adc0_state>
 100:	82 30       	cpi	r24, 0x02	; 2
 102:	c9 f1       	breq	.+114    	; 0x176 <__EEPROM_REGION_LENGTH__+0x76>
 104:	28 f4       	brcc	.+10     	; 0x110 <__EEPROM_REGION_LENGTH__+0x10>
 106:	88 23       	and	r24, r24
 108:	49 f0       	breq	.+18     	; 0x11c <__EEPROM_REGION_LENGTH__+0x1c>
 10a:	81 30       	cpi	r24, 0x01	; 1
 10c:	21 f1       	breq	.+72     	; 0x156 <__EEPROM_REGION_LENGTH__+0x56>
 10e:	b6 c0       	rjmp	.+364    	; 0x27c <__EEPROM_REGION_LENGTH__+0x17c>
 110:	83 30       	cpi	r24, 0x03	; 3
 112:	d1 f1       	breq	.+116    	; 0x188 <__EEPROM_REGION_LENGTH__+0x88>
 114:	84 30       	cpi	r24, 0x04	; 4
 116:	09 f4       	brne	.+2      	; 0x11a <__EEPROM_REGION_LENGTH__+0x1a>
 118:	a8 c0       	rjmp	.+336    	; 0x26a <__EEPROM_REGION_LENGTH__+0x16a>
 11a:	b0 c0       	rjmp	.+352    	; 0x27c <__EEPROM_REGION_LENGTH__+0x17c>
		// State to select the ADC channel to measure.
		case 0:
			if(adc0_channel == 0) {
 11c:	80 91 06 38 	lds	r24, 0x3806	; 0x803806 <adc0_channel>
 120:	81 11       	cpse	r24, r1
 122:	04 c0       	rjmp	.+8      	; 0x12c <__EEPROM_REGION_LENGTH__+0x2c>
				ADC0.MUXPOS = ADC_MEAS_CHANNEL_1;
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	80 93 0c 06 	sts	0x060C, r24	; 0x80060c <__RODATA_PM_OFFSET__+0x7f860c>
 12a:	0d c0       	rjmp	.+26     	; 0x146 <__EEPROM_REGION_LENGTH__+0x46>
			} else if(adc0_channel == 1) {
 12c:	81 30       	cpi	r24, 0x01	; 1
 12e:	21 f4       	brne	.+8      	; 0x138 <__EEPROM_REGION_LENGTH__+0x38>
				ADC0.MUXPOS = ADC_MEAS_CHANNEL_2;
 130:	82 e0       	ldi	r24, 0x02	; 2
 132:	80 93 0c 06 	sts	0x060C, r24	; 0x80060c <__RODATA_PM_OFFSET__+0x7f860c>
 136:	07 c0       	rjmp	.+14     	; 0x146 <__EEPROM_REGION_LENGTH__+0x46>
			} else if(adc0_channel == 2) {
 138:	82 30       	cpi	r24, 0x02	; 2
 13a:	21 f4       	brne	.+8      	; 0x144 <__EEPROM_REGION_LENGTH__+0x44>
				ADC0.MUXPOS = ADC_MEAS_CHANNEL_3;
 13c:	83 e0       	ldi	r24, 0x03	; 3
 13e:	80 93 0c 06 	sts	0x060C, r24	; 0x80060c <__RODATA_PM_OFFSET__+0x7f860c>
 142:	01 c0       	rjmp	.+2      	; 0x146 <__EEPROM_REGION_LENGTH__+0x46>
			} else {
				// nothing to do here.
				// The code execution should never enter here.
				asm("nop");
 144:	00 00       	nop
			}
			adc0_state = 1;
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	80 93 07 38 	sts	0x3807, r24	; 0x803807 <adc0_state>
			adc0_ms_counter = 0;
 14c:	10 92 00 38 	sts	0x3800, r1	; 0x803800 <__DATA_REGION_ORIGIN__>
 150:	10 92 01 38 	sts	0x3801, r1	; 0x803801 <__DATA_REGION_ORIGIN__+0x1>
			break;
 154:	9a c0       	rjmp	.+308    	; 0x28a <__EEPROM_REGION_LENGTH__+0x18a>
		
		// Wait some time for the ADC Muxer to change channel
		// before to start a new conversion.
		case 1:
			if(adc0_ms_counter >= 1) {
 156:	80 91 00 38 	lds	r24, 0x3800	; 0x803800 <__DATA_REGION_ORIGIN__>
 15a:	90 91 01 38 	lds	r25, 0x3801	; 0x803801 <__DATA_REGION_ORIGIN__+0x1>
 15e:	89 2b       	or	r24, r25
 160:	09 f4       	brne	.+2      	; 0x164 <__EEPROM_REGION_LENGTH__+0x64>
 162:	93 c0       	rjmp	.+294    	; 0x28a <__EEPROM_REGION_LENGTH__+0x18a>
				// Start a new conversion.
				ADC0.COMMAND |= ADC_START_IMMEDIATE_gc;
 164:	e0 e0       	ldi	r30, 0x00	; 0
 166:	f6 e0       	ldi	r31, 0x06	; 6
 168:	82 85       	ldd	r24, Z+10	; 0x0a
 16a:	81 60       	ori	r24, 0x01	; 1
 16c:	82 87       	std	Z+10, r24	; 0x0a
				// Change to next state.
				adc0_state = 2;
 16e:	82 e0       	ldi	r24, 0x02	; 2
 170:	80 93 07 38 	sts	0x3807, r24	; 0x803807 <adc0_state>
 174:	8a c0       	rjmp	.+276    	; 0x28a <__EEPROM_REGION_LENGTH__+0x18a>
			}
			break;
		
		// Check if conversion is done.
		case 2:
			if(ADC_0_is_conversion_done()) {
 176:	0e 94 8a 01 	call	0x314	; 0x314 <ADC_0_is_conversion_done>
 17a:	88 23       	and	r24, r24
 17c:	09 f4       	brne	.+2      	; 0x180 <__EEPROM_REGION_LENGTH__+0x80>
 17e:	85 c0       	rjmp	.+266    	; 0x28a <__EEPROM_REGION_LENGTH__+0x18a>
				// Change state.
				adc0_state = 3;
 180:	83 e0       	ldi	r24, 0x03	; 3
 182:	80 93 07 38 	sts	0x3807, r24	; 0x803807 <adc0_state>
 186:	81 c0       	rjmp	.+258    	; 0x28a <__EEPROM_REGION_LENGTH__+0x18a>
			break;
		
		// State to get the conversion result.
		case 3:
			// Get conversion from specified ADC channel.
			adc_result = ADC_0_get_conversion_result();
 188:	0e 94 8e 01 	call	0x31c	; 0x31c <ADC_0_get_conversion_result>
			// a voltage divider. The voltage is reduced by a factor of 11.
			// R1 + R2 / R2 = (100K + 10K) / 10K = 11 
			// R3 + R4 / R4 = (100K + 10K) / 10K = 11 
			// R5 + R6 / R6 = (100K + 10K) / 10K = 11 			
		
			if(adc0_channel == 0) {
 18c:	c0 91 06 38 	lds	r28, 0x3806	; 0x803806 <adc0_channel>
 190:	c1 11       	cpse	r28, r1
 192:	1b c0       	rjmp	.+54     	; 0x1ca <__EEPROM_REGION_LENGTH__+0xca>
				// Calculate voltage Vin_1 (Refer to schematic).
				adc0_voltage_1 = ((adc_result * 2.5) / 4095) * 11;
 194:	0e 94 c0 02 	call	0x580	; 0x580 <__floatunsisf>
 198:	20 e0       	ldi	r18, 0x00	; 0
 19a:	30 e0       	ldi	r19, 0x00	; 0
 19c:	40 e2       	ldi	r20, 0x20	; 32
 19e:	50 e4       	ldi	r21, 0x40	; 64
 1a0:	0e 94 4e 03 	call	0x69c	; 0x69c <__mulsf3>
 1a4:	20 e0       	ldi	r18, 0x00	; 0
 1a6:	30 ef       	ldi	r19, 0xF0	; 240
 1a8:	4f e7       	ldi	r20, 0x7F	; 127
 1aa:	55 e4       	ldi	r21, 0x45	; 69
 1ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__divsf3>
 1b0:	20 e0       	ldi	r18, 0x00	; 0
 1b2:	30 e0       	ldi	r19, 0x00	; 0
 1b4:	40 e3       	ldi	r20, 0x30	; 48
 1b6:	51 e4       	ldi	r21, 0x41	; 65
 1b8:	0e 94 4e 03 	call	0x69c	; 0x69c <__mulsf3>
 1bc:	0e 94 91 02 	call	0x522	; 0x522 <__fixunssfsi>
 1c0:	60 93 04 38 	sts	0x3804, r22	; 0x803804 <adc0_voltage_1>
 1c4:	70 93 05 38 	sts	0x3805, r23	; 0x803805 <adc0_voltage_1+0x1>
 1c8:	3d c0       	rjmp	.+122    	; 0x244 <__EEPROM_REGION_LENGTH__+0x144>
			} else if(adc0_channel == 1) {
 1ca:	c1 30       	cpi	r28, 0x01	; 1
 1cc:	d9 f4       	brne	.+54     	; 0x204 <__EEPROM_REGION_LENGTH__+0x104>
				// Calculate voltage Vin_1 (Refer to schematic).
				adc0_voltage_2 = ((adc_result * 2.5) / 4095) * 11;
 1ce:	0e 94 c0 02 	call	0x580	; 0x580 <__floatunsisf>
 1d2:	20 e0       	ldi	r18, 0x00	; 0
 1d4:	30 e0       	ldi	r19, 0x00	; 0
 1d6:	40 e2       	ldi	r20, 0x20	; 32
 1d8:	50 e4       	ldi	r21, 0x40	; 64
 1da:	0e 94 4e 03 	call	0x69c	; 0x69c <__mulsf3>
 1de:	20 e0       	ldi	r18, 0x00	; 0
 1e0:	30 ef       	ldi	r19, 0xF0	; 240
 1e2:	4f e7       	ldi	r20, 0x7F	; 127
 1e4:	55 e4       	ldi	r21, 0x45	; 69
 1e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__divsf3>
 1ea:	20 e0       	ldi	r18, 0x00	; 0
 1ec:	30 e0       	ldi	r19, 0x00	; 0
 1ee:	40 e3       	ldi	r20, 0x30	; 48
 1f0:	51 e4       	ldi	r21, 0x41	; 65
 1f2:	0e 94 4e 03 	call	0x69c	; 0x69c <__mulsf3>
 1f6:	0e 94 91 02 	call	0x522	; 0x522 <__fixunssfsi>
 1fa:	60 93 02 38 	sts	0x3802, r22	; 0x803802 <adc0_voltage_2>
 1fe:	70 93 03 38 	sts	0x3803, r23	; 0x803803 <adc0_voltage_2+0x1>
 202:	20 c0       	rjmp	.+64     	; 0x244 <__EEPROM_REGION_LENGTH__+0x144>
			} else if(adc0_channel == 2) {
 204:	c2 30       	cpi	r28, 0x02	; 2
 206:	d9 f4       	brne	.+54     	; 0x23e <__EEPROM_REGION_LENGTH__+0x13e>
				// Calculate voltage Vin_1 (Refer to schematic).
				adc0_voltage_2 = ((adc_result * 2.5) / 4095) * 11;
 208:	0e 94 c0 02 	call	0x580	; 0x580 <__floatunsisf>
 20c:	20 e0       	ldi	r18, 0x00	; 0
 20e:	30 e0       	ldi	r19, 0x00	; 0
 210:	40 e2       	ldi	r20, 0x20	; 32
 212:	50 e4       	ldi	r21, 0x40	; 64
 214:	0e 94 4e 03 	call	0x69c	; 0x69c <__mulsf3>
 218:	20 e0       	ldi	r18, 0x00	; 0
 21a:	30 ef       	ldi	r19, 0xF0	; 240
 21c:	4f e7       	ldi	r20, 0x7F	; 127
 21e:	55 e4       	ldi	r21, 0x45	; 69
 220:	0e 94 1f 02 	call	0x43e	; 0x43e <__divsf3>
 224:	20 e0       	ldi	r18, 0x00	; 0
 226:	30 e0       	ldi	r19, 0x00	; 0
 228:	40 e3       	ldi	r20, 0x30	; 48
 22a:	51 e4       	ldi	r21, 0x41	; 65
 22c:	0e 94 4e 03 	call	0x69c	; 0x69c <__mulsf3>
 230:	0e 94 91 02 	call	0x522	; 0x522 <__fixunssfsi>
 234:	60 93 02 38 	sts	0x3802, r22	; 0x803802 <adc0_voltage_2>
 238:	70 93 03 38 	sts	0x3803, r23	; 0x803803 <adc0_voltage_2+0x1>
 23c:	07 c0       	rjmp	.+14     	; 0x24c <__EEPROM_REGION_LENGTH__+0x14c>
			} else {
				// nothing to do here.
				// The code execution should never enter here.
				asm("nop");
 23e:	00 00       	nop
			}
		
			// Increment to use next ADC channel next time.
			if(adc0_channel < 2) {
 240:	c2 30       	cpi	r28, 0x02	; 2
 242:	20 f4       	brcc	.+8      	; 0x24c <__EEPROM_REGION_LENGTH__+0x14c>
				adc0_channel++;
 244:	cf 5f       	subi	r28, 0xFF	; 255
 246:	c0 93 06 38 	sts	0x3806, r28	; 0x803806 <adc0_channel>
 24a:	02 c0       	rjmp	.+4      	; 0x250 <__EEPROM_REGION_LENGTH__+0x150>
			} else {
				adc0_channel = 0;
 24c:	10 92 06 38 	sts	0x3806, r1	; 0x803806 <adc0_channel>
			}
			// Change state.
			adc0_state = 4;
 250:	84 e0       	ldi	r24, 0x04	; 4
 252:	80 93 07 38 	sts	0x3807, r24	; 0x803807 <adc0_state>
			// Clear counter.
			adc0_ms_counter = 0;
 256:	10 92 00 38 	sts	0x3800, r1	; 0x803800 <__DATA_REGION_ORIGIN__>
 25a:	10 92 01 38 	sts	0x3801, r1	; 0x803801 <__DATA_REGION_ORIGIN__+0x1>
			// Clear the Result Ready Interrupt Flag.
			ADC0.INTFLAGS |= ADC_RESRDY_bm;
 25e:	e0 e0       	ldi	r30, 0x00	; 0
 260:	f6 e0       	ldi	r31, 0x06	; 6
 262:	85 81       	ldd	r24, Z+5	; 0x05
 264:	81 60       	ori	r24, 0x01	; 1
 266:	85 83       	std	Z+5, r24	; 0x05
			break;
 268:	10 c0       	rjmp	.+32     	; 0x28a <__EEPROM_REGION_LENGTH__+0x18a>
		
		// Wait a predefined time to start next measurement.
		case 4:
			if(adc0_ms_counter > 1) {// 1 milli seconds				
 26a:	80 91 00 38 	lds	r24, 0x3800	; 0x803800 <__DATA_REGION_ORIGIN__>
 26e:	90 91 01 38 	lds	r25, 0x3801	; 0x803801 <__DATA_REGION_ORIGIN__+0x1>
 272:	02 97       	sbiw	r24, 0x02	; 2
 274:	50 f0       	brcs	.+20     	; 0x28a <__EEPROM_REGION_LENGTH__+0x18a>
				// Change state.
				adc0_state = 0;
 276:	10 92 07 38 	sts	0x3807, r1	; 0x803807 <adc0_state>
 27a:	07 c0       	rjmp	.+14     	; 0x28a <__EEPROM_REGION_LENGTH__+0x18a>
			break;
		
		// In case of an error.
		default:
			// Change state.
			adc0_state = 0;
 27c:	10 92 07 38 	sts	0x3807, r1	; 0x803807 <adc0_state>
			// Clear the Result Ready Interrupt Flag.
			ADC0.INTFLAGS |= ADC_RESRDY_bm;
 280:	e0 e0       	ldi	r30, 0x00	; 0
 282:	f6 e0       	ldi	r31, 0x06	; 6
 284:	85 81       	ldd	r24, Z+5	; 0x05
 286:	81 60       	ori	r24, 0x01	; 1
 288:	85 83       	std	Z+5, r24	; 0x05
			break;
	}
}
 28a:	cf 91       	pop	r28
 28c:	08 95       	ret

0000028e <__vector_8>:
*			The counters is this routine are consumed by
*			other functions.
*
* \return	Nothing
*/
ISR(TCA0_OVF_vect) {
 28e:	1f 92       	push	r1
 290:	0f 92       	push	r0
 292:	0f b6       	in	r0, 0x3f	; 63
 294:	0f 92       	push	r0
 296:	11 24       	eor	r1, r1
 298:	8f 93       	push	r24
 29a:	9f 93       	push	r25
	//
	adc0_ms_counter++;
 29c:	80 91 00 38 	lds	r24, 0x3800	; 0x803800 <__DATA_REGION_ORIGIN__>
 2a0:	90 91 01 38 	lds	r25, 0x3801	; 0x803801 <__DATA_REGION_ORIGIN__+0x1>
 2a4:	01 96       	adiw	r24, 0x01	; 1
 2a6:	80 93 00 38 	sts	0x3800, r24	; 0x803800 <__DATA_REGION_ORIGIN__>
 2aa:	90 93 01 38 	sts	0x3801, r25	; 0x803801 <__DATA_REGION_ORIGIN__+0x1>
	
	// Clear overflow interrupt flag. Bit 0 – OVF Overflow/Underflow Interrupt Flag.
	TCA0.SINGLE.INTFLAGS = TCA_SINGLE_OVF_bm;
 2ae:	81 e0       	ldi	r24, 0x01	; 1
 2b0:	80 93 0b 0a 	sts	0x0A0B, r24	; 0x800a0b <__RODATA_PM_OFFSET__+0x7f8a0b>
}
 2b4:	9f 91       	pop	r25
 2b6:	8f 91       	pop	r24
 2b8:	0f 90       	pop	r0
 2ba:	0f be       	out	0x3f, r0	; 63
 2bc:	0f 90       	pop	r0
 2be:	1f 90       	pop	r1
 2c0:	18 95       	reti

000002c2 <main>:


// Entry point to this program.
int main(void) {
	// Initializes MCU, drivers and middle-ware.
	atmel_start_init();
 2c2:	0e 94 50 00 	call	0xa0	; 0xa0 <atmel_start_init>
	// Initialize GPIOs not used by peripherals.
	GPIOs_Init();
	// Initializes the TCA0 to overflow every 1 milliseconds.
	// This timer is used as a house keeper timer.
	TCA0_Init(1);
 2c6:	81 e0       	ldi	r24, 0x01	; 1
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	0e 94 53 00 	call	0xa6	; 0xa6 <TCA0_Init>
	// Clear the Overflow Interrupt for TCA0.
	TCA0.SINGLE.INTFLAGS = TCA_SINGLE_OVF_bm;
 2ce:	81 e0       	ldi	r24, 0x01	; 1
 2d0:	80 93 0b 0a 	sts	0x0A0B, r24	; 0x800a0b <__RODATA_PM_OFFSET__+0x7f8a0b>
	// Enable global interrupts.
	sei();
 2d4:	78 94       	sei
	
	// Initializes the Watch Dog to 1K cycles (1.0s).
	WDT_Init(WDT_PERIOD_1KCLK_gc);
 2d6:	88 e0       	ldi	r24, 0x08	; 8
 2d8:	0e 94 6f 00 	call	0xde	; 0xde <WDT_Init>

	// Main loop.
	while (1) {
		// Measure voltage.
		ADC0_Measure_Voltage();	
 2dc:	0e 94 7d 00 	call	0xfa	; 0xfa <ADC0_Measure_Voltage>
		
		// Reset Watch Dog.
		WDT_Reset();
 2e0:	0e 94 79 00 	call	0xf2	; 0xf2 <WDT_Reset>
 2e4:	fb cf       	rjmp	.-10     	; 0x2dc <main+0x1a>

000002e6 <ADC_0_init>:
 * \return Nothing
 */
void ADC_0_start_conversion(adc_0_channel_t channel)
{
	ADC0.MUXPOS = channel;
	ADC0.COMMAND |= ADC_START_IMMEDIATE_gc;
 2e6:	e0 e0       	ldi	r30, 0x00	; 0
 2e8:	f6 e0       	ldi	r31, 0x06	; 6
 2ea:	11 82       	std	Z+1, r1	; 0x01
 2ec:	11 86       	std	Z+9, r1	; 0x09
 2ee:	8e e2       	ldi	r24, 0x2E	; 46
 2f0:	82 83       	std	Z+2, r24	; 0x02
 2f2:	13 82       	std	Z+3, r1	; 0x03
 2f4:	8b e1       	ldi	r24, 0x1B	; 27
 2f6:	80 87       	std	Z+8, r24	; 0x08
 2f8:	17 82       	std	Z+7, r1	; 0x07
 2fa:	80 e1       	ldi	r24, 0x10	; 16
 2fc:	82 87       	std	Z+10, r24	; 0x0a
 2fe:	14 82       	std	Z+4, r1	; 0x04
 300:	81 e0       	ldi	r24, 0x01	; 1
 302:	84 87       	std	Z+12, r24	; 0x0c
 304:	85 87       	std	Z+13, r24	; 0x0d
 306:	16 8e       	std	Z+30, r1	; 0x1e
 308:	17 8e       	std	Z+31, r1	; 0x1f
 30a:	14 8e       	std	Z+28, r1	; 0x1c
 30c:	15 8e       	std	Z+29, r1	; 0x1d
 30e:	80 83       	st	Z, r24
 310:	80 e0       	ldi	r24, 0x00	; 0
 312:	08 95       	ret

00000314 <ADC_0_is_conversion_done>:
 * \retval true The ADC conversion is done
 * \retval false The ADC converison is not done
 */
bool ADC_0_is_conversion_done()
{
	return (ADC0.INTFLAGS & ADC_RESRDY_bm);
 314:	80 91 05 06 	lds	r24, 0x0605	; 0x800605 <__RODATA_PM_OFFSET__+0x7f8605>
}
 318:	81 70       	andi	r24, 0x01	; 1
 31a:	08 95       	ret

0000031c <ADC_0_get_conversion_result>:
 *
 * \return Conversion result read from the ADC_0 ADC module
 */
adc_result_t ADC_0_get_conversion_result(void)
{
	return (ADC0.RESULT);
 31c:	60 91 10 06 	lds	r22, 0x0610	; 0x800610 <__RODATA_PM_OFFSET__+0x7f8610>
 320:	70 91 11 06 	lds	r23, 0x0611	; 0x800611 <__RODATA_PM_OFFSET__+0x7f8611>
 324:	80 91 12 06 	lds	r24, 0x0612	; 0x800612 <__RODATA_PM_OFFSET__+0x7f8612>
 328:	90 91 13 06 	lds	r25, 0x0613	; 0x800613 <__RODATA_PM_OFFSET__+0x7f8613>
}
 32c:	08 95       	ret

0000032e <BOD_init>:
	//		 | BOD_VLMCFG_BELOW_gc; /* Interrupt when supply goes below VLM level */

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
}
 32e:	80 e0       	ldi	r24, 0x00	; 0
 330:	08 95       	ret

00000332 <CLKCTRL_init>:
 332:	40 e0       	ldi	r20, 0x00	; 0
 334:	68 ed       	ldi	r22, 0xD8	; 216
 336:	88 e7       	ldi	r24, 0x78	; 120
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	0e 94 0e 02 	call	0x41c	; 0x41c <protected_write_io>
 33e:	40 e0       	ldi	r20, 0x00	; 0
 340:	68 ed       	ldi	r22, 0xD8	; 216
 342:	8c e7       	ldi	r24, 0x7C	; 124
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	0e 94 0e 02 	call	0x41c	; 0x41c <protected_write_io>
 34a:	40 e0       	ldi	r20, 0x00	; 0
 34c:	68 ed       	ldi	r22, 0xD8	; 216
 34e:	80 e7       	ldi	r24, 0x70	; 112
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	0e 94 0e 02 	call	0x41c	; 0x41c <protected_write_io>
 356:	43 e0       	ldi	r20, 0x03	; 3
 358:	68 ed       	ldi	r22, 0xD8	; 216
 35a:	81 e6       	ldi	r24, 0x61	; 97
 35c:	90 e0       	ldi	r25, 0x00	; 0
 35e:	0e 94 0e 02 	call	0x41c	; 0x41c <protected_write_io>
 362:	40 e0       	ldi	r20, 0x00	; 0
 364:	68 ed       	ldi	r22, 0xD8	; 216
 366:	80 e6       	ldi	r24, 0x60	; 96
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	0e 94 0e 02 	call	0x41c	; 0x41c <protected_write_io>
 36e:	40 e0       	ldi	r20, 0x00	; 0
 370:	68 ed       	ldi	r22, 0xD8	; 216
 372:	82 e6       	ldi	r24, 0x62	; 98
 374:	90 e0       	ldi	r25, 0x00	; 0
 376:	0e 94 0e 02 	call	0x41c	; 0x41c <protected_write_io>
			 | 0 << CLKCTRL_CLKOUT_bp /* System clock out: disabled */);

	ccp_write_io((void*)&(CLKCTRL.MCLKLOCK),0 << CLKCTRL_LOCKEN_bp /* lock enable: disabled */);

	return 0;
}
 37a:	80 e0       	ldi	r24, 0x00	; 0
 37c:	08 95       	ret

0000037e <CPUINT_init>:
	// CPUINT.LVL0PRI = 0x0 << CPUINT_LVL0PRI_gp; /* Interrupt Level Priority: 0x0 */

	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

	return 0;
}
 37e:	80 e0       	ldi	r24, 0x00	; 0
 380:	08 95       	ret

00000382 <mcu_init>:
}

void TIMER_0_initialization(void)
{

	TIMER_0_init();
 382:	e0 e1       	ldi	r30, 0x10	; 16
 384:	f4 e0       	ldi	r31, 0x04	; 4
 386:	80 81       	ld	r24, Z
 388:	88 60       	ori	r24, 0x08	; 8
 38a:	81 93       	st	Z+, r24
 38c:	e8 31       	cpi	r30, 0x18	; 24
 38e:	84 e0       	ldi	r24, 0x04	; 4
 390:	f8 07       	cpc	r31, r24
 392:	c9 f7       	brne	.-14     	; 0x386 <mcu_init+0x4>
 394:	e0 e3       	ldi	r30, 0x30	; 48
 396:	f4 e0       	ldi	r31, 0x04	; 4
 398:	80 81       	ld	r24, Z
 39a:	88 60       	ori	r24, 0x08	; 8
 39c:	81 93       	st	Z+, r24
 39e:	e8 33       	cpi	r30, 0x38	; 56
 3a0:	84 e0       	ldi	r24, 0x04	; 4
 3a2:	f8 07       	cpc	r31, r24
 3a4:	c9 f7       	brne	.-14     	; 0x398 <mcu_init+0x16>
 3a6:	e0 e5       	ldi	r30, 0x50	; 80
 3a8:	f4 e0       	ldi	r31, 0x04	; 4
 3aa:	80 81       	ld	r24, Z
 3ac:	88 60       	ori	r24, 0x08	; 8
 3ae:	81 93       	st	Z+, r24
 3b0:	e8 35       	cpi	r30, 0x58	; 88
 3b2:	84 e0       	ldi	r24, 0x04	; 4
 3b4:	f8 07       	cpc	r31, r24
 3b6:	c9 f7       	brne	.-14     	; 0x3aa <mcu_init+0x28>
 3b8:	08 95       	ret

000003ba <ADC_0_initialization>:
 3ba:	e1 e1       	ldi	r30, 0x11	; 17
 3bc:	f4 e0       	ldi	r31, 0x04	; 4
 3be:	80 81       	ld	r24, Z
 3c0:	88 7f       	andi	r24, 0xF8	; 248
 3c2:	84 60       	ori	r24, 0x04	; 4
 3c4:	80 83       	st	Z, r24
 3c6:	80 81       	ld	r24, Z
 3c8:	87 7f       	andi	r24, 0xF7	; 247
 3ca:	80 83       	st	Z, r24
 3cc:	e2 e1       	ldi	r30, 0x12	; 18
 3ce:	f4 e0       	ldi	r31, 0x04	; 4
 3d0:	80 81       	ld	r24, Z
 3d2:	88 7f       	andi	r24, 0xF8	; 248
 3d4:	84 60       	ori	r24, 0x04	; 4
 3d6:	80 83       	st	Z, r24
 3d8:	80 81       	ld	r24, Z
 3da:	87 7f       	andi	r24, 0xF7	; 247
 3dc:	80 83       	st	Z, r24
 3de:	e3 e1       	ldi	r30, 0x13	; 19
 3e0:	f4 e0       	ldi	r31, 0x04	; 4
 3e2:	80 81       	ld	r24, Z
 3e4:	88 7f       	andi	r24, 0xF8	; 248
 3e6:	84 60       	ori	r24, 0x04	; 4
 3e8:	80 83       	st	Z, r24
 3ea:	80 81       	ld	r24, Z
 3ec:	87 7f       	andi	r24, 0xF7	; 247
 3ee:	80 83       	st	Z, r24
 3f0:	0e 94 73 01 	call	0x2e6	; 0x2e6 <ADC_0_init>
 3f4:	08 95       	ret

000003f6 <system_init>:
/**
 * \brief System initialization
 */
void system_init()
{
	mcu_init();
 3f6:	0e 94 c1 01 	call	0x382	; 0x382 <mcu_init>

	CLKCTRL_init();
 3fa:	0e 94 99 01 	call	0x332	; 0x332 <CLKCTRL_init>

	VREF_0_init();
 3fe:	0e 94 19 02 	call	0x432	; 0x432 <VREF_0_init>

	ADC_0_initialization();
 402:	0e 94 dd 01 	call	0x3ba	; 0x3ba <ADC_0_initialization>

	WDT_0_init();
 406:	0e 94 1d 02 	call	0x43a	; 0x43a <WDT_0_init>
}

void TIMER_0_initialization(void)
{

	TIMER_0_init();
 40a:	0e 94 14 02 	call	0x428	; 0x428 <TIMER_0_init>

	WDT_0_init();

	TIMER_0_initialization();

	CPUINT_init();
 40e:	0e 94 bf 01 	call	0x37e	; 0x37e <CPUINT_init>

	SLPCTRL_init();
 412:	0e 94 12 02 	call	0x424	; 0x424 <SLPCTRL_init>

	BOD_init();
 416:	0e 94 97 01 	call	0x32e	; 0x32e <BOD_init>
 41a:	08 95       	ret

0000041c <protected_write_io>:
#if defined(__GNUC__)
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
#endif
	movw    r30, r24                // Load addr into Z
 41c:	fc 01       	movw	r30, r24
	out     CCP, r22                // Start CCP handshake
 41e:	64 bf       	out	0x34, r22	; 52
	st      Z, r20                  // Write value to I/O register
 420:	40 83       	st	Z, r20
	ret                             // Return to caller
 422:	08 95       	ret

00000424 <SLPCTRL_init>:

	// SLPCTRL.CTRLA = 0 << SLPCTRL_SEN_bp /* Sleep enable: disabled */
	//		 | SLPCTRL_SMODE_IDLE_gc; /* Idle mode */

	return 0;
}
 424:	80 e0       	ldi	r24, 0x00	; 0
 426:	08 95       	ret

00000428 <TIMER_0_init>:
	//		 | 0 << TCA_SINGLE_CMP1OV_bp /* Compare 1 Waveform Output Value: disabled */
	//		 | 0 << TCA_SINGLE_CMP2OV_bp; /* Compare 2 Waveform Output Value: disabled */

	// TCA0.SINGLE.DBGCTRL = 0 << TCA_SINGLE_DBGRUN_bp; /* Debug Run: disabled */

	TCA0.SINGLE.EVCTRL = 0 << TCA_SINGLE_CNTAEI_bp          /* Count on Event Input A: disabled */
 428:	80 e6       	ldi	r24, 0x60	; 96
 42a:	80 93 09 0a 	sts	0x0A09, r24	; 0x800a09 <__RODATA_PM_OFFSET__+0x7f8a09>
	// TCA0.SINGLE.CTRLA = TCA_SINGLE_CLKSEL_DIV1_gc /* System Clock */
	//		 | 0 << TCA_SINGLE_ENABLE_bp /* Module Enable: disabled */
	//		 | 0 << TCA_SINGLE_RUNSTDBY_bp; /* Run Standby: disabled */

	return 0;
}
 42e:	80 e0       	ldi	r24, 0x00	; 0
 430:	08 95       	ret

00000432 <VREF_0_init>:
 * \return Initialization status.
 */
int8_t VREF_0_init()
{

	VREF_CTRLA = VREF_AC0REFSEL_1V024_gc; /* Voltage reference at 1.024V */
 432:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__RODATA_PM_OFFSET__+0x7f80a0>
	// VREF_CTRLB = 0 << VREF_ADC0REFEN_bp /* ADC0 reference enable: disabled */
	//		 | 0 << VREF_NVMREFEN_bp /* NVM reference enable: disabled */
	//		 | 0 << VREF_AC0REFEN_bp; /* AC0 DACREF reference enable: disabled */

	return 0;
}
 436:	80 e0       	ldi	r24, 0x00	; 0
 438:	08 95       	ret

0000043a <WDT_0_init>:

	// ccp_write_io((void*)&(WDT.CTRLA),WDT_PERIOD_OFF_gc /* Watch-Dog timer Off */
	//		 | WDT_WINDOW_OFF_gc /* Window mode off */);

	return 0;
}
 43a:	80 e0       	ldi	r24, 0x00	; 0
 43c:	08 95       	ret

0000043e <__divsf3>:
 43e:	0e 94 33 02 	call	0x466	; 0x466 <__divsf3x>
 442:	0c 94 14 03 	jmp	0x628	; 0x628 <__fp_round>
 446:	0e 94 0d 03 	call	0x61a	; 0x61a <__fp_pscB>
 44a:	58 f0       	brcs	.+22     	; 0x462 <__divsf3+0x24>
 44c:	0e 94 06 03 	call	0x60c	; 0x60c <__fp_pscA>
 450:	40 f0       	brcs	.+16     	; 0x462 <__divsf3+0x24>
 452:	29 f4       	brne	.+10     	; 0x45e <__divsf3+0x20>
 454:	5f 3f       	cpi	r21, 0xFF	; 255
 456:	29 f0       	breq	.+10     	; 0x462 <__divsf3+0x24>
 458:	0c 94 fd 02 	jmp	0x5fa	; 0x5fa <__fp_inf>
 45c:	51 11       	cpse	r21, r1
 45e:	0c 94 48 03 	jmp	0x690	; 0x690 <__fp_szero>
 462:	0c 94 03 03 	jmp	0x606	; 0x606 <__fp_nan>

00000466 <__divsf3x>:
 466:	0e 94 25 03 	call	0x64a	; 0x64a <__fp_split3>
 46a:	68 f3       	brcs	.-38     	; 0x446 <__divsf3+0x8>

0000046c <__divsf3_pse>:
 46c:	99 23       	and	r25, r25
 46e:	b1 f3       	breq	.-20     	; 0x45c <__divsf3+0x1e>
 470:	55 23       	and	r21, r21
 472:	91 f3       	breq	.-28     	; 0x458 <__divsf3+0x1a>
 474:	95 1b       	sub	r25, r21
 476:	55 0b       	sbc	r21, r21
 478:	bb 27       	eor	r27, r27
 47a:	aa 27       	eor	r26, r26
 47c:	62 17       	cp	r22, r18
 47e:	73 07       	cpc	r23, r19
 480:	84 07       	cpc	r24, r20
 482:	38 f0       	brcs	.+14     	; 0x492 <__divsf3_pse+0x26>
 484:	9f 5f       	subi	r25, 0xFF	; 255
 486:	5f 4f       	sbci	r21, 0xFF	; 255
 488:	22 0f       	add	r18, r18
 48a:	33 1f       	adc	r19, r19
 48c:	44 1f       	adc	r20, r20
 48e:	aa 1f       	adc	r26, r26
 490:	a9 f3       	breq	.-22     	; 0x47c <__divsf3_pse+0x10>
 492:	35 d0       	rcall	.+106    	; 0x4fe <__divsf3_pse+0x92>
 494:	0e 2e       	mov	r0, r30
 496:	3a f0       	brmi	.+14     	; 0x4a6 <__divsf3_pse+0x3a>
 498:	e0 e8       	ldi	r30, 0x80	; 128
 49a:	32 d0       	rcall	.+100    	; 0x500 <__divsf3_pse+0x94>
 49c:	91 50       	subi	r25, 0x01	; 1
 49e:	50 40       	sbci	r21, 0x00	; 0
 4a0:	e6 95       	lsr	r30
 4a2:	00 1c       	adc	r0, r0
 4a4:	ca f7       	brpl	.-14     	; 0x498 <__divsf3_pse+0x2c>
 4a6:	2b d0       	rcall	.+86     	; 0x4fe <__divsf3_pse+0x92>
 4a8:	fe 2f       	mov	r31, r30
 4aa:	29 d0       	rcall	.+82     	; 0x4fe <__divsf3_pse+0x92>
 4ac:	66 0f       	add	r22, r22
 4ae:	77 1f       	adc	r23, r23
 4b0:	88 1f       	adc	r24, r24
 4b2:	bb 1f       	adc	r27, r27
 4b4:	26 17       	cp	r18, r22
 4b6:	37 07       	cpc	r19, r23
 4b8:	48 07       	cpc	r20, r24
 4ba:	ab 07       	cpc	r26, r27
 4bc:	b0 e8       	ldi	r27, 0x80	; 128
 4be:	09 f0       	breq	.+2      	; 0x4c2 <__divsf3_pse+0x56>
 4c0:	bb 0b       	sbc	r27, r27
 4c2:	80 2d       	mov	r24, r0
 4c4:	bf 01       	movw	r22, r30
 4c6:	ff 27       	eor	r31, r31
 4c8:	93 58       	subi	r25, 0x83	; 131
 4ca:	5f 4f       	sbci	r21, 0xFF	; 255
 4cc:	3a f0       	brmi	.+14     	; 0x4dc <__divsf3_pse+0x70>
 4ce:	9e 3f       	cpi	r25, 0xFE	; 254
 4d0:	51 05       	cpc	r21, r1
 4d2:	78 f0       	brcs	.+30     	; 0x4f2 <__divsf3_pse+0x86>
 4d4:	0c 94 fd 02 	jmp	0x5fa	; 0x5fa <__fp_inf>
 4d8:	0c 94 48 03 	jmp	0x690	; 0x690 <__fp_szero>
 4dc:	5f 3f       	cpi	r21, 0xFF	; 255
 4de:	e4 f3       	brlt	.-8      	; 0x4d8 <__divsf3_pse+0x6c>
 4e0:	98 3e       	cpi	r25, 0xE8	; 232
 4e2:	d4 f3       	brlt	.-12     	; 0x4d8 <__divsf3_pse+0x6c>
 4e4:	86 95       	lsr	r24
 4e6:	77 95       	ror	r23
 4e8:	67 95       	ror	r22
 4ea:	b7 95       	ror	r27
 4ec:	f7 95       	ror	r31
 4ee:	9f 5f       	subi	r25, 0xFF	; 255
 4f0:	c9 f7       	brne	.-14     	; 0x4e4 <__divsf3_pse+0x78>
 4f2:	88 0f       	add	r24, r24
 4f4:	91 1d       	adc	r25, r1
 4f6:	96 95       	lsr	r25
 4f8:	87 95       	ror	r24
 4fa:	97 f9       	bld	r25, 7
 4fc:	08 95       	ret
 4fe:	e1 e0       	ldi	r30, 0x01	; 1
 500:	66 0f       	add	r22, r22
 502:	77 1f       	adc	r23, r23
 504:	88 1f       	adc	r24, r24
 506:	bb 1f       	adc	r27, r27
 508:	62 17       	cp	r22, r18
 50a:	73 07       	cpc	r23, r19
 50c:	84 07       	cpc	r24, r20
 50e:	ba 07       	cpc	r27, r26
 510:	20 f0       	brcs	.+8      	; 0x51a <__divsf3_pse+0xae>
 512:	62 1b       	sub	r22, r18
 514:	73 0b       	sbc	r23, r19
 516:	84 0b       	sbc	r24, r20
 518:	ba 0b       	sbc	r27, r26
 51a:	ee 1f       	adc	r30, r30
 51c:	88 f7       	brcc	.-30     	; 0x500 <__divsf3_pse+0x94>
 51e:	e0 95       	com	r30
 520:	08 95       	ret

00000522 <__fixunssfsi>:
 522:	0e 94 2d 03 	call	0x65a	; 0x65a <__fp_splitA>
 526:	88 f0       	brcs	.+34     	; 0x54a <__fixunssfsi+0x28>
 528:	9f 57       	subi	r25, 0x7F	; 127
 52a:	98 f0       	brcs	.+38     	; 0x552 <__fixunssfsi+0x30>
 52c:	b9 2f       	mov	r27, r25
 52e:	99 27       	eor	r25, r25
 530:	b7 51       	subi	r27, 0x17	; 23
 532:	b0 f0       	brcs	.+44     	; 0x560 <__fixunssfsi+0x3e>
 534:	e1 f0       	breq	.+56     	; 0x56e <__fixunssfsi+0x4c>
 536:	66 0f       	add	r22, r22
 538:	77 1f       	adc	r23, r23
 53a:	88 1f       	adc	r24, r24
 53c:	99 1f       	adc	r25, r25
 53e:	1a f0       	brmi	.+6      	; 0x546 <__fixunssfsi+0x24>
 540:	ba 95       	dec	r27
 542:	c9 f7       	brne	.-14     	; 0x536 <__fixunssfsi+0x14>
 544:	14 c0       	rjmp	.+40     	; 0x56e <__fixunssfsi+0x4c>
 546:	b1 30       	cpi	r27, 0x01	; 1
 548:	91 f0       	breq	.+36     	; 0x56e <__fixunssfsi+0x4c>
 54a:	0e 94 47 03 	call	0x68e	; 0x68e <__fp_zero>
 54e:	b1 e0       	ldi	r27, 0x01	; 1
 550:	08 95       	ret
 552:	0c 94 47 03 	jmp	0x68e	; 0x68e <__fp_zero>
 556:	67 2f       	mov	r22, r23
 558:	78 2f       	mov	r23, r24
 55a:	88 27       	eor	r24, r24
 55c:	b8 5f       	subi	r27, 0xF8	; 248
 55e:	39 f0       	breq	.+14     	; 0x56e <__fixunssfsi+0x4c>
 560:	b9 3f       	cpi	r27, 0xF9	; 249
 562:	cc f3       	brlt	.-14     	; 0x556 <__fixunssfsi+0x34>
 564:	86 95       	lsr	r24
 566:	77 95       	ror	r23
 568:	67 95       	ror	r22
 56a:	b3 95       	inc	r27
 56c:	d9 f7       	brne	.-10     	; 0x564 <__fixunssfsi+0x42>
 56e:	3e f4       	brtc	.+14     	; 0x57e <__fixunssfsi+0x5c>
 570:	90 95       	com	r25
 572:	80 95       	com	r24
 574:	70 95       	com	r23
 576:	61 95       	neg	r22
 578:	7f 4f       	sbci	r23, 0xFF	; 255
 57a:	8f 4f       	sbci	r24, 0xFF	; 255
 57c:	9f 4f       	sbci	r25, 0xFF	; 255
 57e:	08 95       	ret

00000580 <__floatunsisf>:
 580:	e8 94       	clt
 582:	09 c0       	rjmp	.+18     	; 0x596 <__floatsisf+0x12>

00000584 <__floatsisf>:
 584:	97 fb       	bst	r25, 7
 586:	3e f4       	brtc	.+14     	; 0x596 <__floatsisf+0x12>
 588:	90 95       	com	r25
 58a:	80 95       	com	r24
 58c:	70 95       	com	r23
 58e:	61 95       	neg	r22
 590:	7f 4f       	sbci	r23, 0xFF	; 255
 592:	8f 4f       	sbci	r24, 0xFF	; 255
 594:	9f 4f       	sbci	r25, 0xFF	; 255
 596:	99 23       	and	r25, r25
 598:	a9 f0       	breq	.+42     	; 0x5c4 <__floatsisf+0x40>
 59a:	f9 2f       	mov	r31, r25
 59c:	96 e9       	ldi	r25, 0x96	; 150
 59e:	bb 27       	eor	r27, r27
 5a0:	93 95       	inc	r25
 5a2:	f6 95       	lsr	r31
 5a4:	87 95       	ror	r24
 5a6:	77 95       	ror	r23
 5a8:	67 95       	ror	r22
 5aa:	b7 95       	ror	r27
 5ac:	f1 11       	cpse	r31, r1
 5ae:	f8 cf       	rjmp	.-16     	; 0x5a0 <__floatsisf+0x1c>
 5b0:	fa f4       	brpl	.+62     	; 0x5f0 <__floatsisf+0x6c>
 5b2:	bb 0f       	add	r27, r27
 5b4:	11 f4       	brne	.+4      	; 0x5ba <__floatsisf+0x36>
 5b6:	60 ff       	sbrs	r22, 0
 5b8:	1b c0       	rjmp	.+54     	; 0x5f0 <__floatsisf+0x6c>
 5ba:	6f 5f       	subi	r22, 0xFF	; 255
 5bc:	7f 4f       	sbci	r23, 0xFF	; 255
 5be:	8f 4f       	sbci	r24, 0xFF	; 255
 5c0:	9f 4f       	sbci	r25, 0xFF	; 255
 5c2:	16 c0       	rjmp	.+44     	; 0x5f0 <__floatsisf+0x6c>
 5c4:	88 23       	and	r24, r24
 5c6:	11 f0       	breq	.+4      	; 0x5cc <__floatsisf+0x48>
 5c8:	96 e9       	ldi	r25, 0x96	; 150
 5ca:	11 c0       	rjmp	.+34     	; 0x5ee <__floatsisf+0x6a>
 5cc:	77 23       	and	r23, r23
 5ce:	21 f0       	breq	.+8      	; 0x5d8 <__floatsisf+0x54>
 5d0:	9e e8       	ldi	r25, 0x8E	; 142
 5d2:	87 2f       	mov	r24, r23
 5d4:	76 2f       	mov	r23, r22
 5d6:	05 c0       	rjmp	.+10     	; 0x5e2 <__floatsisf+0x5e>
 5d8:	66 23       	and	r22, r22
 5da:	71 f0       	breq	.+28     	; 0x5f8 <__floatsisf+0x74>
 5dc:	96 e8       	ldi	r25, 0x86	; 134
 5de:	86 2f       	mov	r24, r22
 5e0:	70 e0       	ldi	r23, 0x00	; 0
 5e2:	60 e0       	ldi	r22, 0x00	; 0
 5e4:	2a f0       	brmi	.+10     	; 0x5f0 <__floatsisf+0x6c>
 5e6:	9a 95       	dec	r25
 5e8:	66 0f       	add	r22, r22
 5ea:	77 1f       	adc	r23, r23
 5ec:	88 1f       	adc	r24, r24
 5ee:	da f7       	brpl	.-10     	; 0x5e6 <__floatsisf+0x62>
 5f0:	88 0f       	add	r24, r24
 5f2:	96 95       	lsr	r25
 5f4:	87 95       	ror	r24
 5f6:	97 f9       	bld	r25, 7
 5f8:	08 95       	ret

000005fa <__fp_inf>:
 5fa:	97 f9       	bld	r25, 7
 5fc:	9f 67       	ori	r25, 0x7F	; 127
 5fe:	80 e8       	ldi	r24, 0x80	; 128
 600:	70 e0       	ldi	r23, 0x00	; 0
 602:	60 e0       	ldi	r22, 0x00	; 0
 604:	08 95       	ret

00000606 <__fp_nan>:
 606:	9f ef       	ldi	r25, 0xFF	; 255
 608:	80 ec       	ldi	r24, 0xC0	; 192
 60a:	08 95       	ret

0000060c <__fp_pscA>:
 60c:	00 24       	eor	r0, r0
 60e:	0a 94       	dec	r0
 610:	16 16       	cp	r1, r22
 612:	17 06       	cpc	r1, r23
 614:	18 06       	cpc	r1, r24
 616:	09 06       	cpc	r0, r25
 618:	08 95       	ret

0000061a <__fp_pscB>:
 61a:	00 24       	eor	r0, r0
 61c:	0a 94       	dec	r0
 61e:	12 16       	cp	r1, r18
 620:	13 06       	cpc	r1, r19
 622:	14 06       	cpc	r1, r20
 624:	05 06       	cpc	r0, r21
 626:	08 95       	ret

00000628 <__fp_round>:
 628:	09 2e       	mov	r0, r25
 62a:	03 94       	inc	r0
 62c:	00 0c       	add	r0, r0
 62e:	11 f4       	brne	.+4      	; 0x634 <__fp_round+0xc>
 630:	88 23       	and	r24, r24
 632:	52 f0       	brmi	.+20     	; 0x648 <__fp_round+0x20>
 634:	bb 0f       	add	r27, r27
 636:	40 f4       	brcc	.+16     	; 0x648 <__fp_round+0x20>
 638:	bf 2b       	or	r27, r31
 63a:	11 f4       	brne	.+4      	; 0x640 <__fp_round+0x18>
 63c:	60 ff       	sbrs	r22, 0
 63e:	04 c0       	rjmp	.+8      	; 0x648 <__fp_round+0x20>
 640:	6f 5f       	subi	r22, 0xFF	; 255
 642:	7f 4f       	sbci	r23, 0xFF	; 255
 644:	8f 4f       	sbci	r24, 0xFF	; 255
 646:	9f 4f       	sbci	r25, 0xFF	; 255
 648:	08 95       	ret

0000064a <__fp_split3>:
 64a:	57 fd       	sbrc	r21, 7
 64c:	90 58       	subi	r25, 0x80	; 128
 64e:	44 0f       	add	r20, r20
 650:	55 1f       	adc	r21, r21
 652:	59 f0       	breq	.+22     	; 0x66a <__fp_splitA+0x10>
 654:	5f 3f       	cpi	r21, 0xFF	; 255
 656:	71 f0       	breq	.+28     	; 0x674 <__fp_splitA+0x1a>
 658:	47 95       	ror	r20

0000065a <__fp_splitA>:
 65a:	88 0f       	add	r24, r24
 65c:	97 fb       	bst	r25, 7
 65e:	99 1f       	adc	r25, r25
 660:	61 f0       	breq	.+24     	; 0x67a <__fp_splitA+0x20>
 662:	9f 3f       	cpi	r25, 0xFF	; 255
 664:	79 f0       	breq	.+30     	; 0x684 <__fp_splitA+0x2a>
 666:	87 95       	ror	r24
 668:	08 95       	ret
 66a:	12 16       	cp	r1, r18
 66c:	13 06       	cpc	r1, r19
 66e:	14 06       	cpc	r1, r20
 670:	55 1f       	adc	r21, r21
 672:	f2 cf       	rjmp	.-28     	; 0x658 <__fp_split3+0xe>
 674:	46 95       	lsr	r20
 676:	f1 df       	rcall	.-30     	; 0x65a <__fp_splitA>
 678:	08 c0       	rjmp	.+16     	; 0x68a <__fp_splitA+0x30>
 67a:	16 16       	cp	r1, r22
 67c:	17 06       	cpc	r1, r23
 67e:	18 06       	cpc	r1, r24
 680:	99 1f       	adc	r25, r25
 682:	f1 cf       	rjmp	.-30     	; 0x666 <__fp_splitA+0xc>
 684:	86 95       	lsr	r24
 686:	71 05       	cpc	r23, r1
 688:	61 05       	cpc	r22, r1
 68a:	08 94       	sec
 68c:	08 95       	ret

0000068e <__fp_zero>:
 68e:	e8 94       	clt

00000690 <__fp_szero>:
 690:	bb 27       	eor	r27, r27
 692:	66 27       	eor	r22, r22
 694:	77 27       	eor	r23, r23
 696:	cb 01       	movw	r24, r22
 698:	97 f9       	bld	r25, 7
 69a:	08 95       	ret

0000069c <__mulsf3>:
 69c:	0e 94 61 03 	call	0x6c2	; 0x6c2 <__mulsf3x>
 6a0:	0c 94 14 03 	jmp	0x628	; 0x628 <__fp_round>
 6a4:	0e 94 06 03 	call	0x60c	; 0x60c <__fp_pscA>
 6a8:	38 f0       	brcs	.+14     	; 0x6b8 <__mulsf3+0x1c>
 6aa:	0e 94 0d 03 	call	0x61a	; 0x61a <__fp_pscB>
 6ae:	20 f0       	brcs	.+8      	; 0x6b8 <__mulsf3+0x1c>
 6b0:	95 23       	and	r25, r21
 6b2:	11 f0       	breq	.+4      	; 0x6b8 <__mulsf3+0x1c>
 6b4:	0c 94 fd 02 	jmp	0x5fa	; 0x5fa <__fp_inf>
 6b8:	0c 94 03 03 	jmp	0x606	; 0x606 <__fp_nan>
 6bc:	11 24       	eor	r1, r1
 6be:	0c 94 48 03 	jmp	0x690	; 0x690 <__fp_szero>

000006c2 <__mulsf3x>:
 6c2:	0e 94 25 03 	call	0x64a	; 0x64a <__fp_split3>
 6c6:	70 f3       	brcs	.-36     	; 0x6a4 <__mulsf3+0x8>

000006c8 <__mulsf3_pse>:
 6c8:	95 9f       	mul	r25, r21
 6ca:	c1 f3       	breq	.-16     	; 0x6bc <__mulsf3+0x20>
 6cc:	95 0f       	add	r25, r21
 6ce:	50 e0       	ldi	r21, 0x00	; 0
 6d0:	55 1f       	adc	r21, r21
 6d2:	62 9f       	mul	r22, r18
 6d4:	f0 01       	movw	r30, r0
 6d6:	72 9f       	mul	r23, r18
 6d8:	bb 27       	eor	r27, r27
 6da:	f0 0d       	add	r31, r0
 6dc:	b1 1d       	adc	r27, r1
 6de:	63 9f       	mul	r22, r19
 6e0:	aa 27       	eor	r26, r26
 6e2:	f0 0d       	add	r31, r0
 6e4:	b1 1d       	adc	r27, r1
 6e6:	aa 1f       	adc	r26, r26
 6e8:	64 9f       	mul	r22, r20
 6ea:	66 27       	eor	r22, r22
 6ec:	b0 0d       	add	r27, r0
 6ee:	a1 1d       	adc	r26, r1
 6f0:	66 1f       	adc	r22, r22
 6f2:	82 9f       	mul	r24, r18
 6f4:	22 27       	eor	r18, r18
 6f6:	b0 0d       	add	r27, r0
 6f8:	a1 1d       	adc	r26, r1
 6fa:	62 1f       	adc	r22, r18
 6fc:	73 9f       	mul	r23, r19
 6fe:	b0 0d       	add	r27, r0
 700:	a1 1d       	adc	r26, r1
 702:	62 1f       	adc	r22, r18
 704:	83 9f       	mul	r24, r19
 706:	a0 0d       	add	r26, r0
 708:	61 1d       	adc	r22, r1
 70a:	22 1f       	adc	r18, r18
 70c:	74 9f       	mul	r23, r20
 70e:	33 27       	eor	r19, r19
 710:	a0 0d       	add	r26, r0
 712:	61 1d       	adc	r22, r1
 714:	23 1f       	adc	r18, r19
 716:	84 9f       	mul	r24, r20
 718:	60 0d       	add	r22, r0
 71a:	21 1d       	adc	r18, r1
 71c:	82 2f       	mov	r24, r18
 71e:	76 2f       	mov	r23, r22
 720:	6a 2f       	mov	r22, r26
 722:	11 24       	eor	r1, r1
 724:	9f 57       	subi	r25, 0x7F	; 127
 726:	50 40       	sbci	r21, 0x00	; 0
 728:	9a f0       	brmi	.+38     	; 0x750 <__mulsf3_pse+0x88>
 72a:	f1 f0       	breq	.+60     	; 0x768 <__mulsf3_pse+0xa0>
 72c:	88 23       	and	r24, r24
 72e:	4a f0       	brmi	.+18     	; 0x742 <__mulsf3_pse+0x7a>
 730:	ee 0f       	add	r30, r30
 732:	ff 1f       	adc	r31, r31
 734:	bb 1f       	adc	r27, r27
 736:	66 1f       	adc	r22, r22
 738:	77 1f       	adc	r23, r23
 73a:	88 1f       	adc	r24, r24
 73c:	91 50       	subi	r25, 0x01	; 1
 73e:	50 40       	sbci	r21, 0x00	; 0
 740:	a9 f7       	brne	.-22     	; 0x72c <__mulsf3_pse+0x64>
 742:	9e 3f       	cpi	r25, 0xFE	; 254
 744:	51 05       	cpc	r21, r1
 746:	80 f0       	brcs	.+32     	; 0x768 <__mulsf3_pse+0xa0>
 748:	0c 94 fd 02 	jmp	0x5fa	; 0x5fa <__fp_inf>
 74c:	0c 94 48 03 	jmp	0x690	; 0x690 <__fp_szero>
 750:	5f 3f       	cpi	r21, 0xFF	; 255
 752:	e4 f3       	brlt	.-8      	; 0x74c <__mulsf3_pse+0x84>
 754:	98 3e       	cpi	r25, 0xE8	; 232
 756:	d4 f3       	brlt	.-12     	; 0x74c <__mulsf3_pse+0x84>
 758:	86 95       	lsr	r24
 75a:	77 95       	ror	r23
 75c:	67 95       	ror	r22
 75e:	b7 95       	ror	r27
 760:	f7 95       	ror	r31
 762:	e7 95       	ror	r30
 764:	9f 5f       	subi	r25, 0xFF	; 255
 766:	c1 f7       	brne	.-16     	; 0x758 <__mulsf3_pse+0x90>
 768:	fe 2b       	or	r31, r30
 76a:	88 0f       	add	r24, r24
 76c:	91 1d       	adc	r25, r1
 76e:	96 95       	lsr	r25
 770:	87 95       	ror	r24
 772:	97 f9       	bld	r25, 7
 774:	08 95       	ret

00000776 <__divmodsi4>:
 776:	05 2e       	mov	r0, r21
 778:	97 fb       	bst	r25, 7
 77a:	1e f4       	brtc	.+6      	; 0x782 <__divmodsi4+0xc>
 77c:	00 94       	com	r0
 77e:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <__negsi2>
 782:	57 fd       	sbrc	r21, 7
 784:	07 d0       	rcall	.+14     	; 0x794 <__divmodsi4_neg2>
 786:	0e 94 e5 03 	call	0x7ca	; 0x7ca <__udivmodsi4>
 78a:	07 fc       	sbrc	r0, 7
 78c:	03 d0       	rcall	.+6      	; 0x794 <__divmodsi4_neg2>
 78e:	4e f4       	brtc	.+18     	; 0x7a2 <__divmodsi4_exit>
 790:	0c 94 d2 03 	jmp	0x7a4	; 0x7a4 <__negsi2>

00000794 <__divmodsi4_neg2>:
 794:	50 95       	com	r21
 796:	40 95       	com	r20
 798:	30 95       	com	r19
 79a:	21 95       	neg	r18
 79c:	3f 4f       	sbci	r19, 0xFF	; 255
 79e:	4f 4f       	sbci	r20, 0xFF	; 255
 7a0:	5f 4f       	sbci	r21, 0xFF	; 255

000007a2 <__divmodsi4_exit>:
 7a2:	08 95       	ret

000007a4 <__negsi2>:
 7a4:	90 95       	com	r25
 7a6:	80 95       	com	r24
 7a8:	70 95       	com	r23
 7aa:	61 95       	neg	r22
 7ac:	7f 4f       	sbci	r23, 0xFF	; 255
 7ae:	8f 4f       	sbci	r24, 0xFF	; 255
 7b0:	9f 4f       	sbci	r25, 0xFF	; 255
 7b2:	08 95       	ret

000007b4 <__muluhisi3>:
 7b4:	0e 94 07 04 	call	0x80e	; 0x80e <__umulhisi3>
 7b8:	a5 9f       	mul	r26, r21
 7ba:	90 0d       	add	r25, r0
 7bc:	b4 9f       	mul	r27, r20
 7be:	90 0d       	add	r25, r0
 7c0:	a4 9f       	mul	r26, r20
 7c2:	80 0d       	add	r24, r0
 7c4:	91 1d       	adc	r25, r1
 7c6:	11 24       	eor	r1, r1
 7c8:	08 95       	ret

000007ca <__udivmodsi4>:
 7ca:	a1 e2       	ldi	r26, 0x21	; 33
 7cc:	1a 2e       	mov	r1, r26
 7ce:	aa 1b       	sub	r26, r26
 7d0:	bb 1b       	sub	r27, r27
 7d2:	fd 01       	movw	r30, r26
 7d4:	0d c0       	rjmp	.+26     	; 0x7f0 <__udivmodsi4_ep>

000007d6 <__udivmodsi4_loop>:
 7d6:	aa 1f       	adc	r26, r26
 7d8:	bb 1f       	adc	r27, r27
 7da:	ee 1f       	adc	r30, r30
 7dc:	ff 1f       	adc	r31, r31
 7de:	a2 17       	cp	r26, r18
 7e0:	b3 07       	cpc	r27, r19
 7e2:	e4 07       	cpc	r30, r20
 7e4:	f5 07       	cpc	r31, r21
 7e6:	20 f0       	brcs	.+8      	; 0x7f0 <__udivmodsi4_ep>
 7e8:	a2 1b       	sub	r26, r18
 7ea:	b3 0b       	sbc	r27, r19
 7ec:	e4 0b       	sbc	r30, r20
 7ee:	f5 0b       	sbc	r31, r21

000007f0 <__udivmodsi4_ep>:
 7f0:	66 1f       	adc	r22, r22
 7f2:	77 1f       	adc	r23, r23
 7f4:	88 1f       	adc	r24, r24
 7f6:	99 1f       	adc	r25, r25
 7f8:	1a 94       	dec	r1
 7fa:	69 f7       	brne	.-38     	; 0x7d6 <__udivmodsi4_loop>
 7fc:	60 95       	com	r22
 7fe:	70 95       	com	r23
 800:	80 95       	com	r24
 802:	90 95       	com	r25
 804:	9b 01       	movw	r18, r22
 806:	ac 01       	movw	r20, r24
 808:	bd 01       	movw	r22, r26
 80a:	cf 01       	movw	r24, r30
 80c:	08 95       	ret

0000080e <__umulhisi3>:
 80e:	a2 9f       	mul	r26, r18
 810:	b0 01       	movw	r22, r0
 812:	b3 9f       	mul	r27, r19
 814:	c0 01       	movw	r24, r0
 816:	a3 9f       	mul	r26, r19
 818:	70 0d       	add	r23, r0
 81a:	81 1d       	adc	r24, r1
 81c:	11 24       	eor	r1, r1
 81e:	91 1d       	adc	r25, r1
 820:	b2 9f       	mul	r27, r18
 822:	70 0d       	add	r23, r0
 824:	81 1d       	adc	r24, r1
 826:	11 24       	eor	r1, r1
 828:	91 1d       	adc	r25, r1
 82a:	08 95       	ret

0000082c <_exit>:
 82c:	f8 94       	cli

0000082e <__stop_program>:
 82e:	ff cf       	rjmp	.-2      	; 0x82e <__stop_program>
